local tArgs = { ... }

local function tableCopy(t)
    local u = { }
    for k, v in pairs(t) do u[k] = v end
    return setmetatable(u, getmetatable(t))
end

local function isIn(s, t)
    local i,v
    for i,v in pairs(t) do
        if v == s then return true end
    end
    return false
end

local function replaceItems(item)
    local newItem

    local from = {
        '/startup',
        '/list',
        '/.installer',
        '/edit',
        '/rom/programs/list',
        '/rom/programs/edit'
    }

    local to = {
        '/startup2',
        '/list2',
        '/.installer2',
        '/edit2',
        '/list',
        '/edit'
    }

    for i=1, #from do
        if newItem ~= nil then break end
        newItem = item:gsub(from[i], to[i])
    end

    return newPath
end

-- Get all the files in the directory
local sDir = shell.dir()
if tArgs[1] ~= nil then
    sDir = shell.resolve( tArgs[1] )
end

if not fs.exists(sDir) then
    print('Not a directory')
end

-- Sort into dirs/files, and calculate column count
local tAll = fs.list( sDir )
local tFiles = {}
local tDirs = {}

local n, sItem

for n, sItem in pairs( tAll ) do
    blacklist = {'startup', 'list', 'edit'}
    if string.sub( sItem, 1, 1 ) ~= "." and not isIn(sItem, blacklist) then
        if sItem == 'startup2' then
            table.insert(tFiles, 'startup')
        elseif sItem == 'list2' then
        else
            local sPath = fs.combine( sDir, sItem )
            if fs.isDir( sPath ) then
                table.insert( tDirs, sItem )
            else
                table.insert( tFiles, sItem )
            end
        end
    end
end
table.sort( tDirs )
table.sort( tFiles )

textutils.pagedTabulate( tDirs, tFiles )
